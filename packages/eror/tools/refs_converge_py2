#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# For python2
"""
Check convergence with different numref values

    Copyright (C) 2016-2019 Kazuo YAMADA

    Requirement: Python2.4 or higher
"""

import optparse
import os
import os.path
import re
import shutil
import subprocess
import sys

# OPTIONPARSER PART
usage = "usage: %prog [-h] [-n NUMREF] [-s]"
description = """Execute slfve program with changing numref in parameters_fe.
                 options are \'--num\' and \'--save\'.
              """
parser = optparse.OptionParser(usage=usage, description=description)
parser.add_option('-n', '--num', dest='numref', type="int", default=None,
                  metavar='NUMREF',
                  help='maximum value of numref changed within parameters_fe')
parser.add_option('-s', '--save', dest='save',
                  action='store_true', default=False,
                  help='option flag not to delete slvfe_XX, result_summary')
(options, args) = parser.parse_args()

# FUNCTIONS


def DictFromList(List):  # PAIRWISE LIST ---> DICTIONARY
    return dict(zip(List[:-1:2], List[1::2]))

def makeDict(file):  # file ---> PAIRWISE LIST --->DICTIONARY
    dic_file = {}
    cmtpattern = re.compile('!(.*)')  # COMMENT PATTERN '...!...'
    try:
        f = open(file, mode='rt')
        linelist = [cmtpattern.sub('', line) for line in f
                    if '=' in line]  # IGNORE COMMENT
        for line in linelist:
            key_val = re.split(r'=|,', line)
            key_val = map(lambda i: i.strip(), key_val)  # CLEAN key_val
            dic_file.update(DictFromList(key_val))
    except IOError:
        sys.exit('cannot open %s.' % file)
        f.close()
    f.close()
    return(dic_file)

def get_prm(dic, **kwargs):
    key = kwargs.pop('key', None)
    default = kwargs.pop('default', None)
    if kwargs:
        raise TypeError('Unexpected **kwargs: %r' % kwargs)

    if key in dic.keys():
        value = dic[key].strip('\'').strip('\"')  # REMOVE QUATATIONs
    else:
        value = default
    return value

def change_prm(dic, **kwargs):
    file = kwargs.pop('file', None)
    key = kwargs.pop('key', None)
    new_prm = kwargs.pop('new_prm', None)
    if kwargs:
        raise TypeError('Unexpected **kwargs: %r' % kwargs)
  
    dic[key] = new_prm  
    try:
        f = open(file, 'w+')
        f.write('&fevars\n')
        for key, value in dic.items():
            f.write('%s = %s\n' % (key, value))
        f.write('/\n')
        f.truncate()
    except IOError:
        sys.exit('cannot open %s.' % file)
        f.close()
    f.close()

# MAIN PART
# CHANGE NUMREF AND EXECUTE SLVFE PROGRAM
# OUTPUT SOLVATIONFE AND ERRORS TO result_summary

# CHECK slvfe PATH
cmd = 'which slvfe'
try:
    retcode = subprocess.call(cmd, shell=True) 
    if retcode != 0:
        sys.exit('path is not set to the slvfe executable.')
except OSError:
        sys.exit('path is not set to the which command.')

# GET ABSOLUTE PATH OF CURRENT DIRECTORY
slvfe_dir = os.getcwd()

# READ PARAMETERS_FE AND GET VALUE OF 'refsdirec' KEY
dic_fe = makeDict('parameters_fe')
refsdir = get_prm(dic_fe, key='refsdirec', default='refs')

# CD TO REFS DIRECTORY
try:
    os.chdir(refsdir)
except OSError:
    sys.exit('''Error: refs directory is not found.
       You may be running this script in wrong directory.''')

# READ parameters_er AND GET engdiv
dic_er = makeDict('parameters_er')
er_engdiv = int(get_prm(dic_er, key='engdiv', default=5))
if options.numref is None or options.numref > er_engdiv:
    options.numref = er_engdiv

# BACKUP parameters_fe
os.chdir(slvfe_dir)
shutil.copyfile('parameters_fe', 'parameters_fe.bak')
# CHANGE mesherr IN parameters_fe
dic_chmesh = makeDict('parameters_fe')
change_prm(dic_chmesh, file='parameters_fe', key='clcond', new_prm='\'merge\'')
change_prm(dic_chmesh, file='parameters_fe', key='write_mesherror', new_prm='\'yes\'')

# MAKE result summary
result_file = 'result_summary'
resf = open(result_file, 'w+')
resf.write('block\tsolvationFE 95%Error\tMeshError\n')

# CHANGE numref in parameters_fe AND EXECUTE SLVFE PROGRAM SEQUENTIALLY
for value in range(1, options.numref+1):  # CHANGE NUMREF FROM 1 TO args.numref
    dic_chnum = makeDict('parameters_fe')
    change_prm(dic_chnum, file='parameters_fe', key='numref', new_prm=value)

    output_file = 'slvfe_%02d' % value
    slvf = open(output_file, mode='w+')
    proc = subprocess.Popen(['slvfe'], stdout=slvf)  # SLVFE >> output_file
    proc.communicate()  # WAIT FOR WRITING
    if proc.returncode != 0:
        os.remove('parameters_fe')
        shutil.move('parameters_fe.bak', 'parameters_fe')
        os.remove(output_file)
        sys.exit('slvfe Failed.')

    # READ slvfe_XX AND WRITE block, solvationFE, and Errors TO result_summary
    slvf.seek(0)
    linelist = slvf.readlines()  # READ slvfe_XX
    block = value
    solvationFE_95pError = linelist[-3][3:26].strip()
    MeshError = linelist[-1].split()[3]
    resf.write('%2d\t%s\t%s\n' % (block, solvationFE_95pError, MeshError))

    # REMOVE slvfe_XX if '-s' option is not specified
    if not options.save:
        os.remove(output_file)
    else:
        slvf.close()

# OUTPUT result_summary TO stdout
resf.truncate()
resf.seek(0)
lines = resf.readlines()
print ''.join(lines)
# REMOVE result_summary if '-s' option is not specified
if not options.save:
    os.remove(result_file)
else:
    resf.close()

# RETURN parameters_fe
os.remove('parameters_fe')
shutil.move('parameters_fe.bak', 'parameters_fe')

