#!/usr/bin/env python3

import os
import os.path
import sys
import pickle
import subprocess
import math
from argparse import ArgumentParser

parser = ArgumentParser()

# topology, mandatory
parser.add_argument("-t", "--top", dest = "topology",
                  help = "Gromacs topology file (*.top) for solution",
                  default = None)

# "#define"s.
parser.add_argument("-D", dest = "defines", action="append",
                  help="Defined attributes",
                  default = [])
parser.add_argument("-I", dest = "includes", action="append",
                  help="#include directive lookup paths",
                  default = [])
parser.add_argument("--cpp", dest = "cpp",
                  help = "How to invoke cpp (1) command (default = cpp)",
                  default = "cpp")
parser.add_argument("--no-auto-dir-search", dest = "auto_dir_search", action = "store_false",
                  help = "Stop default DIR searching.", 
                  default = True)

# can be specified; otherwise specify interactively
parser.add_argument("-s", "--solute", dest = "solute",
                  help = "Molecular type of solute molecule (comma separated for multiple choice)",
                  default = None)

parser.add_argument("-v", "--verbose", dest = "verbose", action = "store_true",
                  help = "Increase verbosity (for debug)",
                  default = False)

options = parser.parse_args()

def log(x):
    if options.verbose:
        print(x, file=sys.stderr)

def warn_or_error(x, col):
    prefix = ""
    suffix = ""
    if os.isatty(sys.stderr.fileno()):
        prefix = "\x1b[" + str(col) + ";1m"
        suffix = "\x1b[0m"
    print(prefix + x + suffix, file=sys.stderr)

def warn(x):
    warn_or_error("Warning: " + x, 33)

def error(x):
    warn_or_error("Error: " + x, 31)
    sys.exit(1)

if options.topology == None:
    error("topology must be specified (try --help)")

def find_gmx():
    candidates = ["gmx", "gmx_d", "gmx_mpi", "gmx_mpi_d"]
    for cmd in candidates:
        p = subprocess.Popen(["which", cmd], stdout=subprocess.PIPE) # this will call /usr/bin/which (not shell builtin which) in most of environments
        (stdout, _stderr) = p.communicate()
        if p.returncode == 0 and stdout != b"":
            return stdout.decode()
    return None

def cpp_accepts_traditional():
    try:
        subprocess.check_call(["cpp", "--traditional-cpp", "/dev/null"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.SubprocessError:
        return False
    return True

def where_gromacs():
    try:
        if "GMXDATA" in os.environ:
            p1 = os.path.join(os.environ["GMXDATA"], "top")
            p2 = os.path.join(os.environ["GMXDATA"], "gromacs/top")
            ps = [p1, p2]
        else:
            output = find_gmx()
            log("Found luck at \"%s\"" % output)
            if output == None:
                if options.includes == []:
                    warn("Could not find gmx. Default search path to (gromacs-root-path)/share/gromacs/top is not set; please specify with -I")
                return
            
            rp = os.path.realpath(output)
            bindir = os.path.dirname(rp)
            ps = [os.path.normpath(os.path.join(bindir, "../share/gromacs/top"))]

        for p in ps:
            if os.path.exists(p):
                log("Found gromacs topology path %s" % p)
                options.includes.append(p)

    except OSError:
        pass

carryover = {}

class topology:
    def __init__(self):
        self.atomtype = {}
        self.bondtype = {}
        self.atom2type = {}
        self.atom2charge = {}
        self.atom2mass = {}
        self.atom2sigma = {}
        self.atom2epsilon = {}
        self.moleculetypes = {}
        self.molecules = []
        self.system = []
        self.ljtype = 0
        self.paircorrection = {}

    def process_defaults(self, ls):
        if int(ls[0]) != 1:
            warn("Non-bond type is Buckingham potential, which is not supported")
        self.ljtype = int(ls[1])
        pat = self.ljtype - 1
        log("LJtype = %s" % (["C6/CN - geometric mean",
                              "arithmetic mean",
                              "geometric mean"][pat]))
        global carryover
        carryover["ljformat"] = ["C6C12", "sigeps", "sigeps"][pat]
        carryover["ljtype"] = ["geometric", "arithmetic", "geometric"][pat]

    def process_atomtypes(self, ls):
        # OK, atomtypes in GROMACS is full of mess;
        # The problem is that two of 6 fields are OPTIONAL.
        # see push_at function src/kernel/toppush.c; it's OFFICIALLY full of mess!
        if len(ls) < 6:
            error("Error processing atomtypes section: too few elements")

        (have_bonded_type, have_atomic_number) = (None, None)

        log("Molecular structure: ")
        log(ls)

        if ls[3].isalpha() and len(ls[3]) == 1:
            # single character
            (have_bonded_type, have_atomic_number) = (False, False)
        elif ls[5].isalpha() and len(ls[5]) == 1:
            (have_bonded_type, have_atomic_number) = (True, True)
        elif ls[4].isalpha() and len(ls[4]) == 1:
            if ls[1][0].isalpha():
                (have_bonded_type, have_atomic_number) = (True, False)
            else:
                (have_bonded_type, have_atomic_number) = (False, True)
        
        if have_bonded_type == None or have_atomic_number == None:
            error("Invalid format of atomtypes")

        aname = ls[0]

        offset = 0
        if have_bonded_type:
            offset += 1
        if have_atomic_number:
            offset += 1

        mass = float(ls[offset + 1])
        charge = float(ls[offset + 2])
        sigma = float(ls[offset + 4])
        eps = float(ls[offset + 5])

        self.atom2mass[aname] = mass
        self.atom2charge[aname] = charge
        self.atom2sigma[aname] = sigma
        self.atom2epsilon[aname] = eps

    def process_pairwise_mod(self, ls):
        # process [ nonbond_params ] section
        try:
            functype = int(ls[2])
        except ValueError:
            error("LJ function type in [ nonbond_params ] is string, not integer")

        if functype == 2:
            error("Buckingham LJ is not supported at this moment")
        elif functype != 1:
            error("Unknown LJ function type in [ nonbond_params ]")
        atom1 = ls[0]
        atom2 = ls[1]
        try:
            v = float(ls[3])
            w = float(ls[4])
        except ValueError:
            error("LJ parameter in [ nonbond_params ] is broken")
        self.paircorrection[(atom1, atom2)] = (v, w)
        self.paircorrection[(atom2, atom1)] = (v, w)

    def process_atoms(self, mtype, ls):
        _anum = ls[0]
        atype = ls[1]
        _resnum = ls[2]
        _resname = ls[3]
        atom = ls[4]
        _chargegrp = ls[5]
        if len(ls) >= 7:
            charge = float(ls[6])
        else:
            charge = self.atom2charge[atype]
        if len(ls) >= 8:
            mass = float(ls[7])
        else:
            mass = self.atom2mass[atype]
        
        self.molecules[self.moleculetypes[mtype]].append((atype, atom, charge, mass))

    def molecule(self, mtype, fh):
        log("Entering molecule section \"%s\"" % mtype)
        self.moleculetypes[mtype] = len(self.molecules)
        self.molecules.append([])

        state = None

        for l in fh:
            l = l.split(';')[0] # remove comments
            l = l.strip()
            if l == "":
                continue
            
            if l[0] == '[':
                state = l.split()[1]
                log("  Entering state %s inside %s" % (state, mtype))
                continue
            
            if l[0] == '#':
                # already parsed by cpp; indicating line nubers etc.
                continue
            
            ls = l.split()
            if state == "atoms":
                self.process_atoms(mtype, ls)
            elif state == "moleculetype":
                return self.molecule(ls[0], fh)
            elif state == "system":
                pass
            elif state == "molecules":
                groupname = ls[0]
                nmol = int(ls[1])
                if nmol != 0:
                    self.system.append((groupname, nmol))
                pass
            else:
                # do nothing; only "atom" section matters
                pass
        pass

    def parse_top(self, fh):
        state = None
        for l in fh:
            l = l.split(';')[0] # remove comments
            l = l.strip()
            if l == "":
                continue
            
            if l[0] == '[':
                state = l.split()[1]
                continue
            
            if l[0] == '#':
                # already parsed by cpp; indicating line nubers etc.
                continue
            
            ls = l.split()
            if ls == []:
                continue
            if state == "defaults":
                self.process_defaults(ls)
            if state == "atomtypes":
                self.process_atomtypes(ls)
            elif state == "nonbond_params":
                self.process_pairwise_mod(ls)
            elif state == "moleculetype":
                self.molecule(ls[0], fh)
                # for multiple solutes with the same name
                # get duplicated molecule
                solutes = []
                dups = []
                for (s, _n) in self.system:
                    if s in solutes and s not in dups:
                        dups.append(s)
                    solutes.append(s)
                # resolve conflicts
                for i in range(len(self.system)):
                    (s, n) = self.system[i]
                    if s in dups:
                        newname = "%s(%d)" % (s, (i + 1))
                        self.system[i] = (newname, n)
                        self.moleculetypes[newname] = self.moleculetypes[s]
                return
            pass

if not os.path.exists(options.topology):
    print("Error: topology file does not exist!", file=sys.stderr)
    sys.exit(1)

if options.auto_dir_search:
    where_gromacs()
    options.includes.append(".")

includes = ["-I" + i for i in options.includes]
defines = ["-D" + d for d in options.defines]
cmd = [options.cpp] + includes + defines + [options.topology]
# Work around AMBER topology mess
if cpp_accepts_traditional():
    cmd.insert(1, "--traditional-cpp")
log("Invoking command: " + repr(cmd))

ppw = subprocess.Popen(cmd, stdout=subprocess.PIPE)

top = topology()
pipe_out = ppw.stdout.read().decode().split("\n")
top.parse_top(iter(pipe_out))

ppw.stdout.close()
retcode = ppw.wait()

if retcode != 0:
    warn("Warning: cpp reported an error on preprocessing. Perhaps you forgot to add gromacs default topology path (/usr/share/gromacs/top)?")

def get_topology_info():
    # make list of segment names
    mollist = [s for (s, _n) in top.system]

    # python 2.3 does not have set()
    if options.solute:
        solutes = options.solute.split(',')
    else:
        # interactive input
        print("Molecule types in topology file:", end=' ')
        for s in mollist:
            print(s, end=' ')
        print()
        l = input("Which molecules are solutes? (For multiple choice please specify as comma-separated list) ").split(',')
        solutes = [x.strip() for x in l]

    for s in solutes:
        if s not in mollist:
            error("No such segname in topology: %s" % s)

    # At this moment solute can be one of the follows:
    # * Solute spans several contiguous molecular types.
    #   In this case, these contiguous types should be treated as a single molecule.
    # * Solute spans a single molecular type.
    #   In this case, multiple solute molecules may exist

    # check contiguous or not
    end_solute = False
    for i in range(len(mollist) - 1):
        mol1 = mollist[i]
        mol2 = mollist[i + 1]
        if (mol1 in solutes) and (mol2 not in solutes):
                end_solute = True
        if (mol2 in solutes) and end_solute:    
            error("Solute is not contiguous")
        
    return solutes

solutes = get_topology_info()

# consolidate solutes
solute_single = (len(solutes) == 1)

mols = []
if solute_single:
    # output as in topology (supports multiple solute)
    for (s, n) in top.system:
        if s not in top.moleculetypes:
            # Issue 38
            for x in top.moleculetypes.keys():
                if s.lower() == x.lower() :
                    error(f"Moleculetype in [ sytem ] read as \"{s}\" but defined in [ moleculetype ] as \"{x}\"; gen_structure is case sensitive (unlike GROMACS)")
            error(f"Moleculetype {s} exists in [ system ] section but no corresponding [ moleculetype ] defined")
        molno = top.moleculetypes[s]
        mols.append(([s], n, s in solutes, top.molecules[molno]))
else:
    # merge solute and output as a single molecule
    soluteatoms = []
    for (s, n) in top.system:
        if (s in solutes):
            molno = top.moleculetypes[s]
            soluteatoms += top.molecules[molno] * n

    solute_first = True
    for (s, n) in top.system:
        if s in solutes:
            if solute_first:
                mols.append((solutes, 1, True, soluteatoms))
                solute_first = False
        else:
            molno = top.moleculetypes[s]
            mols.append((s, n, False, top.molecules[molno]))

lenconv = 10.0 # nm to angstrom
eneconv = 1.0e0/4.184e0 # kJ/mol to kcal/mol
def canonicalize_lj_format(v, w):
    # Note: I think it is insane to write C6/C12 to eps/sigma conversion table in every program.
    # It should be cleaned up, but it breaks backward comptibility...

    # Either C6/C12 or sigeps
    ljformat = carryover["ljformat"]

    if ljformat == "sigeps":
        # nm to angstrom
        sig = v
        eps = w
    elif ljformat == "C6C12":
        # convert from C6/C12 to sigeps
        c6 = v
        c12 = w
        eps = 0
        sig = 0
        if c12 != 0:
            f = c12 / c6
            eps = c6 / (4.0 * f)
            sig = f ** (1.0 / 6.0)
    else:
        assert False, "Unknown LJ format"
    sig *= lenconv
    eps *= eneconv
    return (sig, eps)

# Check whether LJ table is necessary
use_ljtable = False
if top.paircorrection != {}:
    # Generate pair-wise LJ table
    use_ljtable = True

    # make LJ table
    # Either geometric or arithmetic
    ljtype = carryover["ljtype"]

    # List up all atoms used
    atomsused = set()
    for (_s, _n, _is_solute, atoms) in mols:
        for (atype, _atom, _charge, _mass) in atoms:
            atomsused.add(atype)

    ljatoms = list(atomsused)
    n = len(ljatoms)
    atom2num = {}
    for i in range(n):
        atom2num[ljatoms[i]] = i

    ljtable = [[0] * n for _ in range(n)]

    # And generate table
    for i in range(n):
        for j in range(n):
            (sigi, epsi) = canonicalize_lj_format(top.atom2sigma[ljatoms[i]], top.atom2epsilon[ljatoms[i]])
            (sigj, epsj) = canonicalize_lj_format(top.atom2sigma[ljatoms[j]], top.atom2epsilon[ljatoms[j]])
            if carryover["ljtype"] == "geometric":
                sig = math.sqrt(sigi * sigj)
            else:
                sig = (sigi + sigj) / 2
            eps = math.sqrt(epsi * epsj)
            ljtable[i][j] = (sig, eps)

    # Fill in corrections
    for k in top.paircorrection:
        (a1, a2) = k
        (v, w) = top.paircorrection[k]
        (sig, eps) = canonicalize_lj_format(v, w)
        if (a1 in ljatoms) and (a2 in ljatoms):
            i = atom2num[a1]
            j = atom2num[a2]
            log("%s - %s: %s replaced with %s" % (a1, a2, repr(ljtable[i][j]), repr((sig, eps))))
            ljtable[i][j] = (sig, eps)

    carryover["ljformat"] = "table"

def gen(mode):
    import copy

    if not os.path.exists(mode):
        os.mkdir(mode)

    curmols = copy.deepcopy(mols)
    nmols = []
    sites = []
    # edit molecules for refs: for multiple solutes with n molecules,
    # refs regards them as 1 solute + (n-1) solvents
    if mode == "refs":
        for i in range(len(mols)):
            (s, n, is_solute, atoms) = mols[i]
            if is_solute and n > 1:
                curmols[i:i+1] = [(s, 1, True, atoms),
                                  (s, n-1, False, atoms)]
                break

    nmols = [n for (_, n, is_solute, _) in curmols
             if not (mode == "refs" and is_solute)]
    sites = [len(atoms) for (_, _, is_solute, atoms) in curmols
             if not (mode == "refs" and is_solute)]

    if mode == "soln":
        for i in range(len(mols)):
            if curmols[i][2]:
                carryover["sltspec"] = i + 1 # 1-origin

    # output MDinfo
    mdifh = open(mode + "/MDinfo", "wt")
    print("FRAMES %d" % len(nmols), file=mdifh)
    
    for n in nmols:
        print("%d" % n, end=' ', file=mdifh)
    print(file=mdifh)
    for n in sites:
        print("%d" % n, end=' ', file=mdifh)
    print(file=mdifh)
    mdifh.close()
    
    solvent_cnt = 1
    ofh = None
    for (s, n, is_solute, atoms) in curmols:
        if is_solute:
            fn = "SltInfo"
            if n > 1:
                solvent_cnt += 1
        else:
            fn = "MolPrm%d" % solvent_cnt
            solvent_cnt += 1

        k = 1

        if ofh:
            ofh.close()
        ofh = open(mode + "/" + fn, "wt")

        for (atype, aname, charge, mass) in atoms:
            eps = top.atom2epsilon[atype]
            sig = top.atom2sigma[atype]
            if use_ljtable:
                eps = float(atom2num[atype] + 1) 
                sig = 0.
            print(("%d %12.4f %12s %8s %.8g %.8g %.8g" %
                           (k, mass, atype, aname, charge, eps, sig)), file=ofh)
            k += 1

    ofh.close()
    # write carryover
    with open(mode + "/.extraparam", "wb") as ofh:
        pickle.dump(carryover, ofh)

    if use_ljtable:
        with open(mode + "/LJTable", "wt") as ofh:
            n = len(ljatoms)
            print(n, file=ofh)
            # FIXME: len-> eps order is used, but program uses ene -> len order
            for i in range(n):
                for j in range(n):
                    print("%+.6e" % ljtable[i][j][0], end=' ', file=ofh)
                print(file=ofh)
            # eps
            for i in range(n):
                for j in range(n):
                    print("%+.6e" % ljtable[i][j][1], end=' ', file=ofh)
                print(file=ofh)

gen("soln")
gen("refs")

